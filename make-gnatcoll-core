#!/bin/zsh

if [[ $# -ne 1 ]]; then
    echo "Usage: $0 PACKAGE_VERSION"
    exit 2
fi

name=gnatcoll-core

_package_version="${1}"
_targeted_host=x86_64-unknown-linux-gnu

jobs="${jobs:-24}"

tar=( tar --format=posix )
bail_out=( exit 1 )
gprbuild=( env GPR_PROJECT_PATH=minimal:core gprbuild -v )
gprinstall=( env GPR_PROJECT_PATH=minimal:core gprinstall -v )

abs_src_tarball_dir=`realpath "${PWD}/src_tarballs"`
abs_bin_tarball_dir=`realpath "${PWD}/bin_tarballs"`
abs_srcdirs_dir=`realpath "${PWD}/srcdirs"`

packname="${name}-${_package_version}"
src_tarball="${abs_src_tarball_dir}/${packname}.tar.gz"
bin_tarball="${abs_bin_tarball_dir}/${packname}-binary-for-${_targeted_host}.tar.xz"
abs_srcdir="${abs_srcdirs_dir}/${packname}"
abs_builddir="${abs_srcdir}"
abs_destdir="${abs_srcdir}/«dest»"

install -d "${abs_srcdirs_dir}"
rm -R -f "${abs_srcdirs_dir}/${packname}" || ${bail_out}
${tar} -f "${src_tarball}" -C "${abs_srcdirs_dir}" -x || ${bail_out}
install -d "${abs_builddir}" || ${bail_out}

(

    cd "${abs_builddir}" || ${bail_out}

    make -C docs html || ${bail_out}
    make -C docs singlehtml || ${bail_out}
    make -C docs latexpdf || ${bail_out}
    #make -C docs epub || ${bail_out} <-- Sphinx barfs on NixOS. Try with a /usr/local Python.
    make -C docs text || ${bail_out}
    make -C docs man || ${bail_out}

    abs_docdir="${abs_destdir}/usr/local/share/doc/${name}"
    install -d "${abs_docdir}"/{{,single}html,text} || ${bail_out}
    install -d "${abs_docdir}"/examples || ${bail_out}
    cp -R docs/_build/html/*.html "${abs_docdir}/html" || ${bail_out}
    cp -R docs/_build/singlehtml/*.html "${abs_docdir}/singlehtml" || ${bail_out}
    install docs/_build/latex/*.pdf "${abs_docdir}" || ${bail_out}
    cp -R docs/_build/text/*.txt "${abs_docdir}/text" || ${bail_out}
    cp -R examples/* "${abs_docdir}"/examples || ${bail_out}

    abs_man1dir="${abs_destdir}/usr/local/share/man/man1"
    install -d "${abs_man1dir}" || ${bail_out}
    install docs/_build/man/*.1 "${abs_man1dir}" || ${bail_out}

    _short_version=`echo "${_package_version}" | sed -E 's/^([0-9]+\.[0-9]+).*/\1/'`

    function gprbuild_project
    {
        local project="${1}"
        local library_type="${2}"
        printf "------------------------------------------\n"
        echo ${gprbuild} -p -m -P"${project}" -j${jobs} \
             -XGNATCOLL_VERSION="${_short_version}" \
             -XLIBRARY_TYPE="${library_type}" \
             -cargs -fno-strict-aliasing
        printf "------------------------------------------\n"
        ${gprbuild} -p -m -P"${project}" -j${jobs} \
                    -XGNATCOLL_VERSION="${_short_version}" \
                    -XLIBRARY_TYPE="${library_type}" \
                    -cargs -fno-strict-aliasing || ${bail_out}
    }

    function gprinstall_project
    {
        local project="${1}"
        local library_type="${2}"
        local sources_subdir='include/'`basename "${project}" .gpr`
        printf "--------------------------------------------\n"
        echo ${gprinstall} -p -f -P"${project}" \
             --prefix="${abs_destdir}/usr/local" \
             --sources-subdir="${sources_subdir}" \
             -XLIBRARY_TYPE="${library_type}" \
             --build-name="${library_type}" \
             --build-var=LIBRARY_TYPE
        printf "--------------------------------------------\n"
        ${gprinstall} -p -f -P"${project}" \
                      --prefix="${abs_destdir}/usr/local" \
                      --sources-subdir="${sources_subdir}" \
                      -XLIBRARY_TYPE="${library_type}" \
                      --build-name="${library_type}" \
                      --build-var=LIBRARY_TYPE
    }

    for p in minimal core projects; do \
        for library_type in relocatable static static-pic; do
            gprbuild_project "${p}/gnatcoll_${p}" "${library_type}"
            gprinstall_project "${p}/gnatcoll_${p}" "${library_type}"
        done
    done

) || ${bail_out}

install -d "${abs_bin_tarball_dir}" || ${bail_out}
${tar} -cvaf "${bin_tarball}" -C "${abs_destdir}" usr || ${bail_out}
